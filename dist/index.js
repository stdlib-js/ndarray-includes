"use strict";var q=function(r,e){return function(){return e||r((e={exports:{}}).exports,e),e.exports}};var g=q(function(Or,z){z.exports={dims:null,keepdims:!1}});var c=q(function(jr,T){"use strict";var E=require("@stdlib/assert-is-plain-object"),h=require("@stdlib/assert-has-own-property"),I=require("@stdlib/assert-is-boolean").isPrimitive,N=require("@stdlib/assert-is-integer-array").primitives,F=require("@stdlib/assert-is-empty-collection"),L=require("@stdlib/ndarray-base-to-unique-normalized-indices"),S=require("@stdlib/array-base-join"),p=require("@stdlib/string-format");function P(r,e,a){var i;if(!E(a))return new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",a));if(h(a,"keepdims")&&(r.keepdims=a.keepdims,!I(r.keepdims)))return new TypeError(p("invalid option. `%s` option must be a boolean. Option: `%s`.","keepdims",r.keepdims));if(h(a,"dims")){if(r.dims=a.dims,!N(r.dims)&&!F(r.dims))return new TypeError(p("invalid option. `%s` option must be an array of integers. Option: `%s`.","dims",r.dims));if(i=L(r.dims,e-1),i===null)return new RangeError(p("invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].","dims",S(r.dims,",")));if(i.length>e)return new RangeError(p("invalid option. `%s` option specifies more dimensions than exists in the input array. Number of dimensions: %d. Option: [%s].",e,S(r.dims,",")));r.dims=i}return null}T.exports=P});var C=q(function(Vr,V){"use strict";var G=require("@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible"),H=require("@stdlib/ndarray-base-assert-is-mostly-safe-data-type-cast"),k=require("@stdlib/assert-is-ndarray-like"),J=require("@stdlib/ndarray-base-unary-reduce-subarray"),K=require("@stdlib/ndarray-base-includes"),Q=require("@stdlib/ndarray-base-spread-dimensions"),U=require("@stdlib/array-base-indices-complement"),W=require("@stdlib/ndarray-shape"),O=require("@stdlib/ndarray-base-order"),X=require("@stdlib/ndarray-base-data-buffer"),Y=require("@stdlib/ndarray-base-strides"),Z=require("@stdlib/ndarray-base-offset"),j=require("@stdlib/ndarray-base-dtype"),_=require("@stdlib/ndarray-empty"),$=require("@stdlib/ndarray-base-ctor"),x=require("@stdlib/ndarray-base-maybe-broadcast-array"),rr=require("@stdlib/ndarray-base-broadcast-scalar"),er=require("@stdlib/strided-base-reinterpret-boolean"),ar=require("@stdlib/array-base-take-indexed"),ir=require("@stdlib/array-base-zero-to"),tr=require("@stdlib/object-assign"),b=require("@stdlib/string-format"),nr=g(),ur=c();function sr(r,e,a){var i,n,o,v,u,t,d,m,l,f,s;if(!k(r))throw new TypeError(b("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",r));if(u=W(r),l=u.length,i=tr({},nr),arguments.length>2&&(o=ur(i,l,a),o))throw o;if(i.dims===null&&(i.dims=ir(l)),v=U(l,i.dims),t=ar(u,v),m=j(r),d=O(r),k(e)){if(!H(j(e),m))throw new TypeError(b("invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.",e));try{f=x(e,t)}catch(Tr){throw new Error("invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.")}}else if(G(e,m))f=rr(e,m,t,d);else throw new TypeError(b("invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.",e));return s=_(t,{dtype:"bool",order:d}),n=new $("uint8",er(X(s),0),t,Y(s,0),Z(s),O(s)),J(K,[r,n,f],i.dims),i.keepdims&&(s=Q(l,s,v)),s}V.exports=sr});var D=q(function(Cr,B){"use strict";var or=require("@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible"),dr=require("@stdlib/ndarray-base-assert-is-mostly-safe-data-type-cast"),w=require("@stdlib/assert-is-ndarray-like"),vr=require("@stdlib/ndarray-base-unary-reduce-subarray"),mr=require("@stdlib/ndarray-ndims"),lr=require("@stdlib/ndarray-base-includes"),A=require("@stdlib/ndarray-shape"),pr=require("@stdlib/ndarray-base-order"),R=require("@stdlib/ndarray-base-dtype"),qr=require("@stdlib/ndarray-base-maybe-broadcast-array"),yr=require("@stdlib/ndarray-base-broadcast-scalar"),fr=require("@stdlib/object-assign"),gr=require("@stdlib/array-base-zero-to"),y=require("@stdlib/string-format"),cr=g(),br=c();function wr(r,e,a,i){var n,o,v,u,t,d;if(!w(r))throw new TypeError(y("invalid argument. First argument must be an ndarray-like object. Value: `%s`.",r));if(!w(a))throw new TypeError(y("invalid argument. Third argument must be an ndarray-like object. Value: `%s`.",a));if(t=mr(r),n=fr({},cr),arguments.length>3&&(o=br(n,t,i),o))throw o;if(n.dims===null&&(n.dims=gr(t)),u=R(r),v=pr(r),w(e)){if(!dr(R(e),u))throw new TypeError(y("invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.",e));try{d=qr(e,A(a))}catch(m){throw new Error("invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.")}}else if(or(e,u))d=yr(e,u,A(a),v);else throw new TypeError(y("invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.",e));return vr(lr,[r,a,d],n.dims),a}B.exports=wr});var hr=require("@stdlib/utils-define-nonenumerable-read-only-property"),M=C(),Sr=D();hr(M,"assign",Sr);module.exports=M;
/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
