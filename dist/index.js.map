{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/main.js", "../lib/assign.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"dims\": null,\n  \"keepdims\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid options. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length > ndims ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option specifies more dimensions than exists in the input array. Number of dimensions: %d. Option: [%s].', ndims, join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isScalarMostlySafeCompatible = require( '@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible' ); // eslint-disable-line id-length\nvar isMostlySafeCast = require( '@stdlib/ndarray-base-assert-is-mostly-safe-data-type-cast' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar unaryReduceSubarray = require( '@stdlib/ndarray-base-unary-reduce-subarray' );\nvar base = require( '@stdlib/ndarray-base-includes' );\nvar spreadDimensions = require( '@stdlib/ndarray-base-spread-dimensions' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to the input array originating in userland\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar getData = require( '@stdlib/ndarray-base-data-buffer' );\nvar getStrides = require( '@stdlib/ndarray-base-strides' );\nvar getOffset = require( '@stdlib/ndarray-base-offset' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar ndarrayCtor = require( '@stdlib/ndarray-base-ctor' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value along one or more dimensions.\n*\n* @param {ndarray} x - input ndarray\n* @param {(ndarray|*)} searchElement - search element\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {Error} second argument must be broadcast-compatible with the non-reduced dimensions of the input ndarray\n* @throws {TypeError} second argument must have a data type which can be safely cast to the data type of the input ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform reduction:\n* var out = includes( x, 6.0 );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*/\nfunction includes( x, searchElement, options ) {\n\tvar opts;\n\tvar view;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar ord;\n\tvar dt;\n\tvar N;\n\tvar v;\n\tvar y;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, N, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Resolve input array meta data:\n\tdt = getDType( x );\n\tord = getOrder( x );\n\n\t// Determine how to broadcast the search element...\n\tif ( isndarrayLike( searchElement ) ) {\n\t\tif ( !isMostlySafeCast( getDType( searchElement ), dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.', searchElement ) );\n\t\t}\n\t\ttry {\n\t\t\tv = maybeBroadcastArray( searchElement, shy );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\tthrow new Error( 'invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.' );\n\t\t}\n\t} else if ( isScalarMostlySafeCompatible( searchElement, dt ) ) {\n\t\tv = broadcastScalar( searchElement, dt, shy, ord );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.', searchElement ) );\n\t}\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input array:\n\ty = empty( shy, {\n\t\t'dtype': 'bool',\n\t\t'order': ord\n\t});\n\n\t// Reinterpret the output array as an \"indexed\" array to ensure faster element access:\n\tview = new ndarrayCtor( 'uint8', reinterpretBoolean( getData( y ), 0 ), shy, getStrides( y, 0 ), getOffset( y ), getOrder( y ) );\n\n\t// Perform the reduction:\n\tunaryReduceSubarray( base, [ x, view, v ], opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = includes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isScalarMostlySafeCompatible = require( '@stdlib/ndarray-base-assert-is-scalar-mostly-safe-compatible' ); // eslint-disable-line id-length\nvar isMostlySafeCast = require( '@stdlib/ndarray-base-assert-is-mostly-safe-data-type-cast' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar unaryReduceSubarray = require( '@stdlib/ndarray-base-unary-reduce-subarray' );\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar base = require( '@stdlib/ndarray-base-includes' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to the input arrays originating in userland\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar maybeBroadcastArray = require( '@stdlib/ndarray-base-maybe-broadcast-array' );\nvar broadcastScalar = require( '@stdlib/ndarray-base-broadcast-scalar' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Tests whether an ndarray contains a specified value along one or more dimensions and assigns the results to a provided output ndarray.\n*\n* @param {ndarray} x - input ndarray\n* @param {(ndarray|*)} searchElement - search element\n* @param {ndarray} y - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {Error} second argument must be broadcast-compatible with the non-reduced dimensions of the input ndarray\n* @throws {TypeError} second argument must have a data type which can be safely cast to the data type of the input ndarray\n* @throws {TypeError} third argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = empty( [], {\n*     'dtype': 'bool'\n* });\n*\n* // Perform reduction:\n* var out = assign( x, 6.0, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*/\nfunction assign( x, searchElement, y, options ) {\n\tvar opts;\n\tvar err;\n\tvar ord;\n\tvar dt;\n\tvar N;\n\tvar v;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\tN = ndims( x );\n\n\topts = objectAssign( {}, defaults );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, N, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve input array meta data:\n\tdt = getDType( x );\n\tord = getOrder( x );\n\n\t// Determine how to broadcast the search element...\n\tif ( isndarrayLike( searchElement ) ) {\n\t\tif ( !isMostlySafeCast( getDType( searchElement ), dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.', searchElement ) );\n\t\t}\n\t\ttry {\n\t\t\tv = maybeBroadcastArray( searchElement, getShape( y ) );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\tthrow new Error( 'invalid argument. Second argument must be broadcast-compatible with the non-reduced dimensions of the input array.' );\n\t\t}\n\t} else if ( isScalarMostlySafeCompatible( searchElement, dt ) ) {\n\t\tv = broadcastScalar( searchElement, dt, getShape( y ), ord );\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument cannot be safely cast to the input array data type. Value: `%s`.', searchElement ) );\n\t}\n\t// Perform the reduction:\n\tunaryReduceSubarray( base, [ x, y, v ], opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether an ndarray contains a specified value along one or more dimensions.\n*\n* @module @stdlib/ndarray-includes\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var includes = require( '@stdlib/ndarray-includes' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform reduction:\n* var out = includes( x, 6.0 );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var empty = require( '@stdlib/ndarray-empty' );\n* var includes = require( '@stdlib/ndarray-includes' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = empty( [], {\n*     'dtype': 'bool'\n* });\n*\n* // Perform reduction:\n* var out = includes.assign( x, 6.0, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isIntegerArray", "isEmptyCollection", "normalizeIndices", "join", "format", "validate", "opts", "ndims", "options", "tmp", "require_main", "__commonJSMin", "exports", "module", "isScalarMostlySafeCompatible", "isMostlySafeCast", "isndarrayLike", "unaryReduceSubarray", "base", "spreadDimensions", "indicesComplement", "getShape", "getOrder", "getData", "getStrides", "getOffset", "getDType", "empty", "ndarrayCtor", "maybeBroadcastArray", "broadcastScalar", "reinterpretBoolean", "takeIndexed", "zeroTo", "objectAssign", "format", "defaults", "validate", "includes", "x", "searchElement", "options", "opts", "view", "err", "idx", "shx", "shy", "ord", "dt", "N", "v", "y", "require_assign", "__commonJSMin", "exports", "module", "isScalarMostlySafeCompatible", "isMostlySafeCast", "isndarrayLike", "unaryReduceSubarray", "ndims", "base", "getShape", "getOrder", "getDType", "maybeBroadcastArray", "broadcastScalar", "objectAssign", "zeroTo", "format", "defaults", "validate", "assign", "x", "searchElement", "y", "options", "opts", "err", "ord", "dt", "N", "v", "setReadOnly", "main", "assign"]
}
